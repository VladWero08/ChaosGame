mtcars
mtcars colnames()
mtcars colnames
mtcars names
colnames(mtcard)
colnames(mtcars)
aggregate(formula=am,FUN=mean,data=mtcars)
aggregate(formula='am',FUN=mean,data=mtcars)
aggregate(wt ~ am, FUN=mean, data = mtcars)
aggregate(wt ~ am, FUN = mean, data = mtcars)
aggregate(wt ~ cyl, FUN = mean, data = mtcars)
aggregate(wt ~ cyl, FUN = mean, data = mtcars)
mtcars
aggregate(mpg ~ am + cyl, FUN = mean, data = mtcars)
asq = (1+sqrt(5)/2)/2
asq
# -> adunare, scadere, inmultire, impartire: +, -, *, /
# -> exponentiere: ^, **
# -> catul, restul impartirii: %/%, %%
ls
ls()
rm(list = ls())
y = c(1,2,3,4,5)
x
y
x = 10:50
x
y
# Adauga valoarea 0 de 5 ori in vectorul z
z = rep(0, 5)
z
z = rep(c(1,2,3), each = 5)
z
b = rep(c(7,8), times = 2, each = 2)
b
b + 10
# Operatiile pe care le putem face pe scalari, le putem face
# pe vectori cu vectori, vectori cu scalari
a = a + z
# Operatiile pe care le putem face pe scalari, le putem face
# pe vectori cu vectori, vectori cu scalari
b = b + 10
b
a + b
x + b
isX = x %in% c(1,9)
isX
numx
numx
4 %in% c(1,9)
survey
4 %in% c(1,9)
survey = data.frame("index" = c(1, 2, 3, 4, 5),
"sex" = c("m", "m", "m", "f", "f"),
"age" = c(99, 46, 23, 54, 23))
survey
aa = list(nume = "Ionel", salariu = 1500, apartenenta = T)
survey = data.frame("index" = c(1, 2, 3, 4, 5),
"sex" = c("m", "m", "m", "f", "f"),
"age" = c(99, 46, 23, 54, 23))
View(survey)
str(survey)
# p[] = all probabilities from p1 to pn
# p[] = p1, p2, p3 ... pn
# cumsum (p) = p1, p1 + p2, p1+p2+p3 ... , sum(pi, i=1,n)
cp = cumsum(dist)
cdfPlot(dist = dbinom(0:100, 100, 0.3), title = "B(100,0.3)")
cdfPlot(dist = dbinom(0:100, 100, 0.3), title = "B(100,0.3)")
cdfPlot(dist = dbinom(0:100, 100, 0.3), title = "B(100,0.3)")
cdfPlot(dist = dbinom(0:100, 100, 0.3), title = "B(100,0.3)")
plot(x, cp, type = "s", lty = 3,
xlab = "x",
ylab = "F",
main = paste("Functia de repartitie:", title),
ylim = c(0,1),
col = "grey",
bty = "n")
abline(h = 0, lty = 2, col = "grey")
abline(h = 1, lty = 2, col = "grey")
myrandsample(n,k)
myrandsample(n,k)
n = 49
k = 6
myrandsample(n,k)
myintunif(5)
x = myintunif(5)
u
myintunif = function(n){
# functia care genereaza un numar uniform intre 1 si n
# `u` o sa fie variabila discreta obtinuta din variabila continua
# 0 < unfirorm < 1
# 0 < n * uniform < n
# 0 <= floor(n * uniform) <= n - 1
# 1 <= u <= n
r = n * uniform(1)
u = floor(r) + 1
u
}
# functia care realizeaza extragerea fara intoarcere a k numere aleatoare din n
myrandsample = function(n,k){
x = 1:n
q = rep(0,k)
for(i in 1:k){
l = length(x)
u = myintunif(l)
q[i] = x[u]
# extragere fara revenire, trebuie sters numarul extras
x = x[x!=q[i]]
}
return(q)
}
n = 49
myrandsample(n,k)
return(u)
myintunif = function(n){
# functia care genereaza un numar uniform intre 1 si n
# `u` o sa fie variabila discreta obtinuta din variabila continua
# 0 < unfirorm < 1
# 0 < n * uniform < n
# 0 <= floor(n * uniform) <= n - 1
# 1 <= u <= n
r = n * uniform(1)
u = floor(r) + 1
return(u)
}
# functia care realizeaza extragerea fara intoarcere a k numere aleatoare din n
myrandsample = function(n,k){
x = 1:n
q = rep(0,k)
for(i in 1:k){
l = length(x)
u = myintunif(l)
q[i] = x[u]
# extragere fara revenire, trebuie sters numarul extras
x = x[x!=q[i]]
}
return(q)
}
n = 49
k = 6
myrandsample(n,k)
r = n * runif(1)
u = floor(r) + 1
return(u)
myintunif = function(n){
# functia care genereaza un numar uniform intre 1 si n
# `u` o sa fie variabila discreta obtinuta din variabila continua
# 0 < unfirorm < 1
# 0 < n * uniform < n
# 0 <= floor(n * uniform) <= n - 1
# 1 <= u <= n
r = n * runif(1)
u = floor(r) + 1
return(u)
}
# functia care realizeaza extragerea fara intoarcere a k numere aleatoare din n
myrandsample = function(n,k){
x = 1:n
q = rep(0,k)
for(i in 1:k){
l = length(x)
u = myintunif(l)
q[i] = x[u]
# extragere fara revenire, trebuie sters numarul extras
x = x[x!=q[i]]
}
return(q)
}
n = 49
k = 6
myrandsample(n,k)
myrandsample(n,k)
myrandsample(n,k)
myrandsample(n,k)
# rezultatul teoretic
res = table(numere_nimerite) / oameni
# probabilitatea empirica de pierdere
res_empiric = sum(res["0","1","2"])
oameni = 100000
# replicate de n ori:
# sum(...) -> numarul de similaritati intre biletul curent si bilet castigator
# myrandsample(49,6) %in% bilet_castigator -> cate numere din vectorul stang se afla in vector drept
numere_nimerite = replicate(n, sum(myrandsample(49,6) %in% bilet_castigator))
# replicate de n ori:
# sum(...) -> numarul de similaritati intre biletul curent si bilet castigator
# myrandsample(49,6) %in% bilet_castigator -> cate numere din vectorul stang se afla in vector drept
numere_nimerite = replicate(oameni, sum(myrandsample(49,6) %in% bilet_castigator))
# rezultatul teoretic
res = table(numere_nimerite) / oameni
# probabilitatea empirica de pierdere
res_empiric = sum(res["0","1","2"])
res
res
# replicate de n ori:
# sum(...) -> numarul de similaritati intre biletul curent si bilet castigator
# myrandsample(49,6) %in% bilet_castigator -> cate numere din vectorul stang se afla in vector drept
numere_nimerite = replicate(n = oameni, sum(myrandsample(49,6) %in% bilet_castigator))
# rezultatul teoretic
res = table(numere_nimerite) / n
# probabilitatea empirica de pierdere
res_empiric = sum(res["0","1","2"])
bilet_castigator = c(31, 7, 17, 15, 10, 42)
n = 100000
# replicate de n ori:
# sum(...) -> numarul de similaritati intre biletul curent si bilet castigator
# myrandsample(49,6) %in% bilet_castigator -> cate numere din vectorul stang se afla in vector drept
numere_nimerite = replicate(n, sum(myrandsample(49,6) %in% bilet_castigator))
# replicate de n ori:
# sum(...) -> numarul de similaritati intre biletul curent si bilet castigator
# myrandsample(49,6) %in% bilet_castigator -> cate numere din vectorul stang se afla in vector drept
numere_nimerite = replicate(n, sum(myrandsample(49,6) %in% bilet_castigator))
myintunif = function(n){
# functia care genereaza un numar uniform intre 1 si n
# `u` o sa fie variabila discreta obtinuta din variabila continua
# 0 < unfirorm < 1
# 0 < n * uniform < n
# 0 <= floor(n * uniform) <= n - 1
# 1 <= u <= n
r = n * runif(1)
u = floor(r) + 1
return(u)
}
# functia care realizeaza extragerea fara intoarcere a k numere aleatoare din n
myrandsample = function(n,k){
x = 1:n
q = rep(0,k)
for(i in 1:k){
l = length(x)
u = myintunif(l)
q[i] = x[u]
# extragere fara revenire, trebuie sters numarul extras
x = x[x!=q[i]]
}
return(q)
}
bilet_castigator = c(31, 7, 17, 15, 10, 42)
n = 100000
# replicate de n ori:
# sum(...) -> numarul de similaritati intre biletul curent si bilet castigator
# myrandsample(49,6) %in% bilet_castigator -> cate numere din vectorul stang se afla in vector drept
numere_nimerite = replicate(n, sum(myrandsample(49,6) %in% bilet_castigator))
table(u) / n
table(numere_nimerite) / n
install.packages("shiny")
runExample("01_hello")
shinyApp(ui = ui, server = server)
library(shiny)
runApp('C:/Users/Vlad Wero/Desktop/AN 2 - 2022-2023/Semester 1/Probabilitati & Statistica/Laborator/ChaosGame/test_shiny.R')
runApp('C:/Users/Vlad Wero/Desktop/AN 2 - 2022-2023/Semester 1/Probabilitati & Statistica/Laborator/ChaosGame/test_shiny.R')
library(shiny); runApp('C:/Users/Vlad Wero/Desktop/AN 2 - 2022-2023/Semester 1/Probabilitati & Statistica/Laborator/ChaosGame/test_shiny.R')
setwd("~/")
library(shiny); runApp('C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R')
runApp('C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R')
runApp('C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R')
library(shiny); runApp('C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R')
source("C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R")
generateTriangle <- function(){
ratio <- 1 / 2
numPoints <- 20000
initPoints <- matrix(NA, ncol = 2, nrow = 3)
allPoints <- matrix(NA, ncol = 2, nrow = numPoints)
# In the triangle, in the XY axis, the initial points are:
# (0,0), (1,0), (0.5, 1)
initPoints[1, ] <- c(0, 0)
initPoints[2, ] <- c(0, 1)
initPoints[3, ] <- c(0.5, 1)
# Generate a random point inside the triangle
# -> this are some boundaries so the random point won't exceed the triangle area
randX <- runif(1, min = 0.25 ,max = 0.75)
randY <- runif(1, min = 0, max = sqrt(3)/4)
allPoints[1, ] <- c(randX, randY)
# For every iteration generate a random vertex of the triangle
initPointsRand <- sample(1:3, numPoints, replace = TRUE)
for(i in 1:(numPoints-1)){
randX <- (allPoints[i, 1] + initPoints[initPointsRand[i], 1]) / ratio
randY <- (allPoints[i, 2] + initPoints[initPointsRand[i], 2]) / ratio
allPoints[i + 1, ] <- c(randX, randY)
}
return (list(initPoints, allPoints))
}
allPoints <- matrix(NA, ncol = 2, nrow = numPoints)
source("C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R")
source("C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R")
list_of_points
source("C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R")
list_of_points
source("C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R")
source("C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R")
list_of_points
tips[, 1]
tips[, 2]
source("C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R")
source("C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R")
source("C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R")
runApp('C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R')
runApp('C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R')
runApp('C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R')
runApp('C:/Users/Vlad Wero/Desktop/Chaos-Game/ChaosGame.R')
library(shiny); runApp('C:/Users/Vlad Wero/Desktop/ChaosGame/ChaosGame.R')
runApp('C:/Users/Vlad Wero/Desktop/ChaosGame/ChaosGame.R')
runApp('C:/Users/Vlad Wero/Desktop/ChaosGame/ChaosGame.R')
runApp('C:/Users/Vlad Wero/Desktop/ChaosGame/ChaosGame.R')
runApp('C:/Users/Vlad Wero/Desktop/ChaosGame/ChaosGame.R')
runApp('C:/Users/Vlad Wero/Desktop/ChaosGame/ChaosGame.R')
library(shiny); runApp('C:/Users/Vlad Wero/Desktop/ChaosGame/ChaosGame.R')
library(shiny); runApp('C:/Users/Vlad Wero/Desktop/ChaosGame/ChaosGame.R')
runApp('C:/Users/Vlad Wero/Desktop/ChaosGame/ChaosGame.R')
library(shiny); runApp('C:/Users/Vlad Wero/Desktop/ChaosGame/ChaosGame.R')
